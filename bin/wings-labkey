#!/data/workspace/disk/.venv/bin/python

#  Copyright 2007-2015 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

__author__ = 'Rajiv Mayani <mayani@isi.edu>'

import sys
import logging
import argparse

from disk.labkey import Labkey
from disk.errors import AuthenticationException, LabkeyException


def configure_logging(verbosity=0):
    verbosity = min(3, verbosity)

    log_levels = [
        logging.ERROR,
        logging.WARN,
        logging.INFO,
        logging.DEBUG
    ]

    logging.basicConfig(level=log_levels[verbosity],
                        format='%(asctime)s:%(levelname)s:%(name)s(%(lineno)d): %(message)s')


def upload_file(input_file, destination, base_url=None, username=None, password=None, project_name=None, create=False,
                overwrite=False, config=None, **kwargs):
    try:
        client = Labkey(base_url=base_url, username=username, password=password, project_name=project_name, config=config)
        client.upload_file(destination, input_file, create=create, overwrite=overwrite)
        print 'File uploaded successfully'

    except AuthenticationException as e:
        logging.error(e)

    except LabkeyException as e:
        logging.error(e)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def select_rows(schema, query, base_url=None, username=None, password=None, project_name=None, config=None, **kwargs):
    try:
        client = Labkey(base_url=base_url, username=username, password=password, project_name=project_name, config=config)
        print client.select_rows(schema, query)

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def execute_sql(schema, sql, base_url=None, username=None, password=None, project_name=None, config=None, **kwargs):
    try:
        client = Labkey(base_url=base_url, username=username, password=password, project_name=project_name, config=config)
        print client.execute_sql(schema, sql)

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def ms2_analysis(input_file, fasta_file, protocol_file, base_url=None, username=None, password=None, project_name=None,
                 config=None, search_engine=None, input_location=None, fasta_location=None, protocol_location=None,
                 **kwargs):
    try:
        client = Labkey(base_url=base_url, username=username, password=password, project_name=project_name, config=config)
        client.ms2_analysis(input_file=input_file, fasta_file=fasta_file, protocol_file=protocol_file,
                            search_engine=search_engine, input_location=input_location, fasta_location=fasta_location,
                            protocol_location=protocol_location)

    except AuthenticationException as e:
        logging.error(e)
        sys.exit(2)

    except LabkeyException as e:
        logging.error(e)
        sys.exit(3)

    except ValueError as e:
        logging.error(e)
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description='Wings Labkey Integration')
    sub_parser = parser.add_subparsers(title='File Upload', description='Upload file to labkey server')

    # File Upload Options
    upload = sub_parser.add_parser('upload')
    upload.add_argument('-i', '--input-file', required=True)
    upload.add_argument('-d', '--destination', required=True,
                        help='Destination directory where the file should be uploaded')
    upload.add_argument('-c', '--create', default=False, action='store_true',
                        help='Create destination directory if it does not exists')
    upload.add_argument('-o', '--overwrite', default=False, action='store_true', help='Overwrite the file if it exists')
    upload.set_defaults(func=upload_file)

    # Labkey API - Select Rows Options
    select = sub_parser.add_parser('select')
    select.add_argument('-s', '--schema', required=True)
    select.add_argument('-q', '--query', required=True)
    select.set_defaults(func=select_rows)

    # Labkey API - Execute SQL Options
    sql = sub_parser.add_parser('sql')
    sql.add_argument('-s', '--schema', required=True)
    sql.add_argument('-q', '--sql', required=True)
    sql.set_defaults(func=execute_sql)

    # Labkey API - Execute SQL Options
    ms2 = sub_parser.add_parser('ms2')
    ms2.add_argument('-i', '--input-file', required=True, help='Input file on which the analysis should be run')
    ms2.add_argument('-f', '--fasta-file', required=True, help='Database against which the input-file is be searched')
    ms2.add_argument('-p', '--protocol-file', required=True, help='XML file describing the search parameters')
    ms2.add_argument('-s', '--search-engine', help='Search engine to use', choices=['xtandem'])
    ms2.add_argument('-il', '--input-location', help='Server directory where the input file should be uploaded')
    ms2.add_argument('-fl', '--fasta-location', help='Server directory where the FASTA file should be uploaded')
    ms2.add_argument('-pl', '--protocol-location', help='Server directory where the protocol file should be uploaded')
    ms2.set_defaults(func=ms2_analysis)

    parser.add_argument('-b', '--base-url')
    parser.add_argument('-u', '--username')
    parser.add_argument('-p', '--password')
    parser.add_argument('-n', '--project-name')
    parser.add_argument('-c', '--config')
    parser.add_argument('-v', '--verbose', default=0, action='count', help='Logging verbosity')

    args = parser.parse_args(sys.argv[1:])

    configure_logging(args.verbose)

    args.func(**vars(args))


if __name__ == '__main__':
    main()
